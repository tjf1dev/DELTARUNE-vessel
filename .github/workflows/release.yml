name: release game

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "release tag"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: install dependencies
        run: sudo apt-get update && sudo apt-get install -y zip wget unzip

      - name: get release notes
        id: commits
        run: |
          if [ -n "${GITHUB_REF_NAME}" ]; then
            RELEASE_BODY=$(git log --pretty=format:'- %s (%h)' ${GITHUB_REF}^..${GITHUB_REF} || echo "No commits found")
          else
            RELEASE_BODY=$(git log -n 10 --pretty=format:'- %s (%h)')
          fi
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: package .love
        run: |
          zip -r DELTARUNE-vessel.love . -x "*.git*" ".github/*" "kristal/*"

      - name: download love for windows
        run: |
          curl -L -o love-11.4-win32.zip https://github.com/love2d/love/releases/download/11.4/love-11.4-win32.zip
          unzip love-11.4-win32.zip -d love-win

      - name: build exe
        run: |
          cat love-win/love-11.4-win32/love.exe DELTARUNE-vessel.love > DELTARUNE-vessel.exe

      - name: create pre-release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name || 'manual-release' }}
          release_name: ${{ github.ref_name || 'manual-release' }}
          body: |
            changes:
            ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: upload .love
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DELTARUNE-vessel.love
          asset_name: DELTARUNE-vessel.love
          asset_content_type: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: upload .exe
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./DELTARUNE-vessel.exe
          asset_name: DELTARUNE-vessel.exe
          asset_content_type: application/octet-stream
          token: ${{ secrets.GITHUB_TOKEN }}
